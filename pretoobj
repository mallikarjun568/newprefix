function prefixToObject(prefixExpression) {
  const stack = [];
  expression = prefixExpression.split("").reverse();
  console.log(expression, "eeee1");
  for (let i = 0; i < expression.length; i++) {
    let char = expression[i];

    if (isOperator(char)) {
      let right = stack.pop();
      let left = stack.pop();

      stack.push({
        obj: char,
        left,
        right,
      });
    } else {
      stack.push(char);
    }
  }
  return stack.pop();
}
function infixToPrefix(expression) {
  let prefix = "";
  const stack = [];
  rexpression = expression.split("").reverse().join("");
  console.log(rexpression, "eeee");
  for (let i = 0; i < rexpression.length; i++) {
    let char = rexpression[i];
    if (isOperator(char)) {
      while (
        stack.length > 0 &&
        getPrecedence(stack[stack.length - 1]) >= getPrecedence(char)
      ) {
        prefix += stack.pop();
      }
      stack.push(char);
    } else if (char === ")") {
      stack.push(char);
    } else if (char === "(") {
      while (stack.length > 0 && stack[stack.length - 1] !== ")") {
        prefix += stack.pop();
      }
      stack.pop();
    } else {
      prefix += char;
    }
  }

  while (stack.length > 0) {
    prefix += stack.pop();
  }

  prefix = prefix.split("").reverse().join("");

  return prefix;
}
const operators = ["+", "-", "*", "/"];
function isOperator(char) {
  return operators.includes(char);
} 
function getPrecedence(operator) {
  if (operator === "+" || operator === "-") {
    return 1;
  } else if (operator === "*" || operator === "/") {
    return 2;
  }
  return 0;
}
const infixExpression = "5+2*3-(4/2)";
const prefixExpression = infixToPrefix(infixExpression);
const objectOfPrefix = prefixToObject(prefixExpression);
console.log("Infix Expression", infixExpression);
console.log("Prefix Expression", prefixExpression);
console.log("Obj", objectOfPrefix);
